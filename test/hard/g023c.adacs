-- $G023C -- adapted from the following ACVC test(s):
--   C54A42D.ADA
 
-- CHECK THAT A  CASE_STATEMENT CORRECTLY HANDLES A FEW ALTERNATIVES
--    COVERING A LARGE RANGE OF INTEGERS.
-- (OPTIMIZATION TEST.)
 
PACKAGE Main IS
 
BODY BEGIN
 
     WRITE("Test $G023C:"; NEXT);
 
     DECLARE
 
          NUMBER  : CONSTANT INTEGER  := 2000 ;
          LITEXPR : CONSTANT INTEGER  := NUMBER + 2000 ;
          STATCON : CONSTANT INTEGER  := 2001 ;
          DYNVAR  :          INTEGER  :=  0 ;
          DYNCON  : CONSTANT INTEGER  :=  1 ;
 
     BEGIN
 
          CASE  INTEGER'VAL(-4000)  IS
               WHEN  1..2000         =>  WRITE(NEXT; "==> WRONG ALTERNATIVE F1");
               WHEN  INTEGER'FIRST..0=>  NULL ;
               WHEN  2001            =>  WRITE(NEXT; "==> WRONG ALTERNATIVE F3");
               WHEN  2002..INTEGER'LAST=>WRITE(NEXT; "==> WRONG ALTERNATIVE F4");
          END CASE;
 
          CASE  INTEGER'VAL(NUMBER)   IS
               WHEN  1..2000         =>  NULL ;
               WHEN  INTEGER'FIRST..0=>  WRITE(NEXT; "==> WRONG ALTERNATIVE G2");
               WHEN  2001            =>  WRITE(NEXT; "==> WRONG ALTERNATIVE G3");
               WHEN  2002..INTEGER'LAST=>WRITE(NEXT; "==> WRONG ALTERNATIVE G4");
          END CASE;
 
          CASE  LITEXPR  IS
               WHEN  1..2000         =>  WRITE(NEXT; "==> WRONG ALTERNATIVE H1");
               WHEN  INTEGER'FIRST..0=>  WRITE(NEXT; "==> WRONG ALTERNATIVE H2");
               WHEN  2001            =>  WRITE(NEXT; "==> WRONG ALTERNATIVE H3");
               WHEN  2002..INTEGER'LAST=>NULL ;
          END CASE;
 
          CASE  STATCON  IS
               WHEN  1..2000         =>  WRITE(NEXT; "==> WRONG ALTERNATIVE I1");
               WHEN  INTEGER'FIRST..0=>  WRITE(NEXT; "==> WRONG ALTERNATIVE I2");
               WHEN  2001            =>  NULL ;
               WHEN  2002..INTEGER'LAST=>WRITE(NEXT; "==> WRONG ALTERNATIVE I4");
          END CASE;
 
          CASE  DYNVAR   IS
               WHEN  1..2000         =>  WRITE(NEXT; "==> WRONG ALTERNATIVE J1");
               WHEN  INTEGER'FIRST..0=>  NULL ;
               WHEN  2001            =>  WRITE(NEXT; "==> WRONG ALTERNATIVE J3");
               WHEN  2002..INTEGER'LAST=>WRITE(NEXT; "==> WRONG ALTERNATIVE J4");
          END CASE;
 
          CASE  DYNCON   IS
               WHEN  1..2000         =>  NULL ;
               WHEN  INTEGER'FIRST..0=>  WRITE(NEXT; "==> WRONG ALTERNATIVE K2");
               WHEN  2001            =>  WRITE(NEXT; "==> WRONG ALTERNATIVE K3");
               WHEN  2002..INTEGER'LAST=>WRITE(NEXT; "==> WRONG ALTERNATIVE K4");
          END CASE;
 
     END ;
 
     WRITE(NEXT);
 
END Main;
 
