-- $Q321C -- adapted from the following ACVC test(s):
--   C74209A-AB.ADA
 
-- CHECK THAT OUTSIDE A PACKAGE WHICH DEFINES PRIVATE TYPES
--    IT IS POSSIBLE TO DECLARE SUBPROGRAMS WHICH USE
--    THOSE TYPES AS TYPES FOR PARAMETERS (OF ANY MODE EXCEPT OUT FOR A
--    LIMITED TYPE) OR AS THE TYPE FOR THE RESULT (FOR FUNCTION
--    SUBPROGRAMS). 
 
 
          PACKAGE  PACK  IS
 
               TYPE  PRIV_REC  IS         PRIVATE;
               TYPE  PRIV      IS         PRIVATE;
 
               FUNCTION  PACKAGED( X: IN INTEGER )  RETURN PRIV_REC;
               FUNCTION  EQUALS( X , Y : PRIV_REC ) RETURN BOOLEAN ;
               PROCEDURE ASSIGN( X : IN  PRIV_REC; Y : OUT PRIV_REC );
 
               FUNCTION PRIV_CONST_IN RETURN PRIV;
               FUNCTION PRIV_CONST_OUT RETURN PRIV;
 
          PRIVATE
               TYPE  PRIV_REC  IS RECORD
                     VAL : INTEGER;
               END RECORD;
 
               SUBTYPE  PRIV IS STRING;
          END  PACK;
 
 
          PACKAGE BODY  PACK  IS
 
               FUNCTION  PACKAGED( X: IN INTEGER )  RETURN PRIV_REC  IS
                    R : PRIV_REC;
               BEGIN
                    R.VAL := X;
                    RETURN  R;
               END  PACKAGED;
 
               FUNCTION  EQUALS( X , Y : PRIV_REC ) RETURN BOOLEAN  IS
               BEGIN
                    RETURN  X.VAL = Y.VAL ;
               END  EQUALS;
 
               PROCEDURE ASSIGN( X : IN  PRIV_REC; Y : OUT PRIV_REC) IS
               BEGIN
                    Y := X;
               END  ASSIGN;
 
               FUNCTION PRIV_CONST_IN RETURN PRIV IS
               BEGIN
                 RETURN "CONSTANT";
               END PRIV_CONST_IN;
 
               FUNCTION PRIV_CONST_OUT RETURN PRIV IS
               BEGIN
                 RETURN "OUT CONSTANT";
               END PRIV_CONST_OUT;
          END  PACK;
 
 
PACKAGE Main IS
     USE PACK;
 
BODY BEGIN
 
     WRITE("Test $Q321C:"; NEXT);
 
     DECLARE
          USE PACK;
 
          PRIV_VAR_1 ,     PRIV_VAR_2      :  PACK.PRIV;
          PRIV_REC_VAR_1 , PRIV_REC_VAR_2  :  PACK.PRIV_REC;
 
          PROCEDURE  PROC2( X : IN OUT PRIV_REC;
                            Y : IN     PRIV_REC;
                            Z : IN OUT PRIV_REC;
                            U :        PRIV_REC )  IS
          BEGIN
 
               IF  NOT(EQUALS( X , PACKAGED(17) ))  OR
                   NOT(EQUALS( Y , PACKAGED(17) ))  OR
                   NOT(EQUALS( U , PACKAGED(17) ))
               THEN
                    WRITE(NEXT; "==> WRONG INPUT VALUES  -  PROC2" );
               END IF;
 
               ASSIGN( PACKAGED(13) , X );
               ASSIGN( PACKAGED(13) , Z );
 
          END  PROC2;
 
 
          FUNCTION  FUNC1( Y : IN  PRIV  ;
                           U :     PRIV  )   RETURN  PRIV  IS
          BEGIN
 
               IF  Y /= PRIV_CONST_IN  OR
                   U /= PRIV_CONST_IN
               THEN
                    WRITE(NEXT; "==> WRONG INPUT VALUES  -  FUNC1" );
               END IF;
 
               RETURN  PRIV_CONST_OUT;
 
          END  FUNC1;
 
 
          FUNCTION  FUNC2( Y : IN  PRIV_REC;
                           U :     PRIV_REC )  RETURN  PRIV_REC  IS
          BEGIN
 
               IF  NOT(EQUALS( Y , PACKAGED(17) ))  OR
                   NOT(EQUALS( U , PACKAGED(17) ))
               THEN
                    WRITE(NEXT; "==> WRONG INPUT VALUES  -  FUNC2" );
               END IF;
 
               RETURN  PACKAGED(13);
 
          END  FUNC2;
 
 
     BEGIN
 
          --------------------------------------------------------------
 
          ASSIGN( PACKAGED(17) , PRIV_REC_VAR_1 );
          ASSIGN( PACKAGED(17) , PRIV_REC_VAR_2 );
 
          PROC2( PRIV_REC_VAR_1 , PACKAGED(17) ,
                 PRIV_REC_VAR_2 , PACKAGED(17) );
 
          IF  NOT(EQUALS( PRIV_REC_VAR_1 , PACKAGED(13) ))  OR
              NOT(EQUALS( PRIV_REC_VAR_2 , PACKAGED(13) ))
          THEN
               WRITE(NEXT; "==> WRONG OUTPUT VALUES  -  PROC2" );
          END IF;
 
          --------------------------------------------------------------
 
          PRIV_VAR_1 := PRIV_CONST_IN;
          PRIV_VAR_2 := PRIV_CONST_IN;
 
          PRIV_VAR_1 :=
              FUNC1( PRIV_VAR_1 , PRIV_CONST_IN );
 
          IF  PRIV_VAR_1 /= PACK.PRIV_CONST_OUT  
          THEN
               WRITE(NEXT; "==> WRONG OUTPUT VALUES  -  FUNC1" );
          END IF;
 
          --------------------------------------------------------------
 
          ASSIGN( PACKAGED(17) , PRIV_REC_VAR_1 );
          ASSIGN( PACKAGED(17) , PRIV_REC_VAR_2 );
 
          ASSIGN( FUNC2( PRIV_REC_VAR_1 , PACKAGED(17)) ,
                  PRIV_REC_VAR_1 );
 
          IF  NOT(EQUALS( PRIV_REC_VAR_1 , PACKAGED(13) ))
          THEN
               WRITE(NEXT; "==> WRONG OUTPUT VALUES  -  FUNC2" );
          END IF;
 
          --------------------------------------------------------------
 
     END;
 
     WRITE(NEXT);
END Main;
