-- $R021C
 
--   Package implementation of the "integer stack" data type.
--   "use" statements version
 
package int_stk is
 
    size : constant integer := 100;
 
    type stack is record
         top   : integer range 0 .. size; -- a ":= 0" here can save proc create
         elem  : array (1 .. size) of integer;  -- allowed in Ada/CS
    end record;
 
    procedure create (S : out stack);
 
    procedure push (S : in out stack; i : in integer);
 
    procedure pop  (S : in out stack);
 
    function  top  (S : in stack) return integer;
 
    function empty (S : in stack) return boolean;
 
end int_stk;
 
package foo is
    procedure p;
end foo;
 
package body foo is
 
    procedure P is
    begin 
      write("Test $R021C:"; NEXT);
    end p;
 
begin
    null;
end foo;
 
package body int_stk is
 
    procedure create (S : out stack) is
    begin
      S.top := 0;
    end create;
 
    procedure push (S : in out stack; i : in integer) is
    begin
      S.top := S.top + 1;
      S.elem(S.top) := i;
    end push;
 
    procedure pop (S : in out stack) is
    begin
      S.top := S.top - 1;
    end pop;
 
    function top (S : in stack) return integer is
    begin
      return S.elem(S.top);
    end top;
 
    function empty (S : in stack) return boolean is
    begin
      return S.top = 0;
    end empty;
 
end int_stk;
 
package main is
 
   USE foo, int_stk;
 
body begin
  p;   -- print test name
 
  declare
    USE int_stk; 
    S : stack;
    i, j, k : integer;
  begin
    create(S);
    if not empty(S) then
       write(NEXT; "==> Error in int_stk.create");
    end if;
    push(S, 1; S, 33; S, -75);
    k := top(S); pop(S);
    j := top(S); pop(S);
    i := top(S); pop(S);
    if i /= 1 or j /= 33 or k /= -75 or not int_stk.empty -- OK to qualify
    then
       write(NEXT; "==> Error in int_stk.top/pop");
    end if;
  end;
 
  write(NEXT);
end main;
