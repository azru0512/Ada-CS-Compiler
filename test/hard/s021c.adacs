-- $S021C -- adapted from the following ACVC test(s):
--   CB1001A-B.ADA
 
-- CHECK THAT ALL PREDEFINED EXCEPTIONS MAY BE RAISED EXPLICITLY
--    AND MAY HAVE HANDLERS WRITTEN FOR THEM.
 
PACKAGE Main IS
 
     FLOW_COUNT : INTEGER := 0;
 
BODY BEGIN
     WRITE("Test $S021C:"; NEXT);
 
     BEGIN
          RAISE CONSTRAINT_ERROR;
          WRITE(NEXT; "==> NO EXCEPTION RAISED WHEN CONSTRAINT_ERROR EXPECTED");
 
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               FLOW_COUNT := FLOW_COUNT + 1;
          WHEN OTHERS =>
               WRITE(NEXT; "==> WRONG EXCEPTION RAISED WHEN CONSTRAINT_ERROR EXPECTED");
     END;
 
     BEGIN
          RAISE NUMERIC_ERROR;
          WRITE(NEXT; "==> NO EXCEPTION RAISED WHEN NUMERIC_ERROR EXPECTED");
 
     EXCEPTION
          WHEN NUMERIC_ERROR =>
               FLOW_COUNT := FLOW_COUNT + 1;
          WHEN OTHERS =>
               WRITE(NEXT; "==> WRONG EXCEPTION RAISED WHEN NUMERIC_ERROR EXPECTED");
     END;
 
     BEGIN
          RAISE TIME_LIMIT;
          WRITE(NEXT; "==> NO EXCEPTION RAISED WHEN TIME_LIMIT EXPECTED");
     EXCEPTION
          WHEN TIME_LIMIT =>
               FLOW_COUNT := FLOW_COUNT + 1;
          WHEN OTHERS =>
               WRITE(NEXT; "==> WRONG EXCEPTION RAISED WHEN TIME_LIMIT EXPECTED");
 
     END;
 
     BEGIN
          RAISE STORAGE_ERROR;
          WRITE(NEXT; "==> NO EXCEPTION RAISED WHEN STORAGE_ERROR EXPECTED");
 
     EXCEPTION
          WHEN STORAGE_ERROR =>
               FLOW_COUNT := FLOW_COUNT + 1;
          WHEN OTHERS =>
               WRITE(NEXT; "==> WRONG EXCEPTION RAISED WHEN STORAGE_ERROR " &
                      "EXPECTED");
     END;
 
     BEGIN
          RAISE EOF_ERROR;
          WRITE(NEXT; "==> NO EXCEPTION RAISED WHEN EOF_ERROR EXPECTED");
 
     EXCEPTION
          WHEN EOF_ERROR =>
               FLOW_COUNT := FLOW_COUNT + 1;
          WHEN OTHERS =>
               WRITE(NEXT; "==> WRONG EXCEPTION RAISED WHEN EOF_ERROR EXPECTED");
     END;
 
     BEGIN
          RAISE INVALID_INPUT;
          WRITE(NEXT; "==> NO EXCEPTION RAISED WHEN INVALID_INPUT EXPECTED");
 
     EXCEPTION
          WHEN INVALID_INPUT =>
               FLOW_COUNT := FLOW_COUNT + 1;
          WHEN OTHERS =>
               WRITE(NEXT; "==> WRONG EXCEPTION RAISED WHEN INVALID_INPUT EXPECTED");
     END;
 
     IF FLOW_COUNT /= 6 THEN
          WRITE(NEXT; "==> WRONG FLOW_COUNT VALUE");
     END IF;
 
     WRITE(NEXT);
END Main;
