-- $$622C -- adapted from the following ACVC test(s):
--   C53006A-AB.ADA
 
-- CHECK THAT CONTROL FLOWS TO THE CORRECT ALTERNATIVE SEQUENCE
--    OF STATEMENTS IN COMPLEX NON-NESTED IF_STATEMENTS WITH STATIC
--    CONDITIONS.
 
 
PACKAGE Main IS
 
 
     I1 : CONSTANT INTEGER := 1;
     I9 : CONSTANT INTEGER := 9;
     BT : CONSTANT BOOLEAN := TRUE;
     BF : CONSTANT BOOLEAN := FALSE;
     FLOW_COUNT : INTEGER;
 
BODY BEGIN
     WRITE("Test $$622C:"; NEXT);
 
     FLOW_COUNT := 0;
 
     -- CHECK IF_STATEMENTS THAT HAVE AN ELSE PART AND NO ELSIF PARTS.
 
     IF TRUE THEN
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSE WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN1");
     END IF;
 
     IF FALSE THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN2");
     ELSE FLOW_COUNT := FLOW_COUNT + 1;
     END IF;
 
     -- CHECK IF_STATEMENTS THAT HAVE TWO ELSIF PARTS AND NO ELSE PART.
 
     IF BT THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSIF TRUE THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN3");
     ELSIF FALSE THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN4");
     END IF;
 
     IF BF THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN5");
     ELSIF I1 = 1 THEN  --(TRUE)
          NULL;
     ELSIF TRUE THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN6");
     END IF;
     FLOW_COUNT := FLOW_COUNT + 1;
 
     IF I9 < 5 THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN7");
     ELSIF I1 /= 1 THEN  --(FALSE)
          NULL;     -- WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN8");
     ELSIF I1 + I9 /= 0 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     END IF;
 
     IF NOT BT THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN8B");
     ELSIF BF OR I9 < 5 THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN8C");
     ELSIF I9 > 5 AND I1 > 5 THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN8D");
     END IF;
 
     -- CHECK IF_STATEMENTS THAT HAVE TWO ELSIF PARTS AND AN ELSE PART.
 
     IF I9 > 5 AND I1 < 5 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSIF FALSE THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN9");
     ELSIF TRUE THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN10");
     ELSE WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN11");
     END IF;
 
     IF I1 < 5 AND I9 < 5 THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN12");
     ELSIF I9 < 5 OR I1 < 5 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSIF TRUE THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN13");
     ELSE WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN14");
     END IF;
 
     IF NOT BT OR (BT AND I9 < 5) THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN15");
     ELSIF (BT AND I9 < 5) OR (BF AND I1 < 5) THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN16");
     ELSIF (BT OR (BF AND I9 > 5)) AND I1 < 5 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSE WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN17");
     END IF;
 
     IF (I9 < 5 OR BF) OR NOT BT THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN18");
     ELSIF (BF OR I9 < 5) OR (I1 + I9 /= 1 AND I9 > 20) THEN
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN19");
     ELSIF BT AND (BF OR I9 < 5) THEN  --(FALSE)
          WRITE(NEXT; "==> INCORRECT SEQUENCE TAKEN20");
     ELSE FLOW_COUNT := FLOW_COUNT + 1;
     END IF;
 
     -- CHECK OVERALL CONTROL FLOW.
 
     IF FLOW_COUNT /= 9 THEN
          WRITE(NEXT; "==> INCORRECT FLOW_COUNT VALUE");
     END IF;
 
     WRITE(NEXT);
END Main;
