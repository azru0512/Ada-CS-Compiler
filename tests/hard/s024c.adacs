-- $S024C -- adapted from the following ACVC test(s):
--   CB2004A-B.ADA
 
-- CHECK THAT A PREDEFINED OR A PROGRAMMER DEFINED EXCEPTION
--    RAISED SEVERAL LEVELS INSIDE A HIERARCHY OF NESTED BLOCKS
--    CAN BE SUCCESSFULLY HANDLED IN AN OUTER BLOCK.
 
PACKAGE Main IS
 
     FLOW_COUNT : INTEGER := 0;
 
     E1, E2, E3 : EXCEPTION;
 
BODY BEGIN
     WRITE("Test $S024C:"; NEXT);
 
     BEGIN
 
          -- PROGRAMMER-DEFINED EXCEPTION, SINGLE EXCEPTON_CHOICE.
 
          BEGIN
               BEGIN
                    BEGIN
                         FLOW_COUNT := FLOW_COUNT + 1;
                         RAISE E1;
                         WRITE(NEXT; "==> PROGRAMMER-DEFINED EXCEPTION NOT RAISED  #1");
 
                    EXCEPTION
                         WHEN E2 | E3 =>
                              WRITE(NEXT; "==> WRONG PROGRAMMER-DEFINED EXCEPTION HANDLED   #1");
                    END;
 
               EXCEPTION
                    WHEN CONSTRAINT_ERROR | NUMERIC_ERROR |
                         TIME_LIMIT | STORAGE_ERROR | INVALID_INPUT |
                         EOF_ERROR | E2 | E3     =>
                         WRITE(NEXT; "==> WRONG EXCEPTION HANDLED   #1");
               END;
 
          EXCEPTION
               WHEN E1 =>
                    FLOW_COUNT := FLOW_COUNT + 1;
          END;
 
          -- PROGRAMMER-DEFINED EXCEPTION, MULTIPLE EXCEPTION_CHOICES.
 
          BEGIN
               BEGIN
                    BEGIN
                         FLOW_COUNT := FLOW_COUNT + 1;
                         RAISE E2;
                         WRITE(NEXT; "==> PROGRAMMER-DEFINED EXCEPTION NOT RAISED  #2");
 
                    EXCEPTION
                         WHEN E1 | E3 =>
                              WRITE(NEXT; "==> WRONG PROGRAMMER-DEFINED EXCEPTION HANDLED   #2");
                    END;
 
               EXCEPTION
                    WHEN CONSTRAINT_ERROR | NUMERIC_ERROR |
                         TIME_LIMIT | STORAGE_ERROR | INVALID_INPUT |
                         EOF_ERROR | E1 | E3     =>
                         WRITE(NEXT; "==> WRONG EXCEPTION HANDLED   #2");
               END;
 
          EXCEPTION
               WHEN E3 =>
                    WRITE(NEXT; "==> WRONG EXCEPTION HANDLED  #2A");
               WHEN E1 | E2 | CONSTRAINT_ERROR =>
                    FLOW_COUNT := FLOW_COUNT + 1;
          END;
 
          -- PROGRAMMER-DEFINED EXCEPTION, 'OTHERS' CHOICE.
 
          BEGIN
               BEGIN
                    BEGIN
                         FLOW_COUNT := FLOW_COUNT + 1;
                         RAISE E1;
                         WRITE(NEXT; "==> PROGRAMMER-DEFINED EXCEPTION NOT RAISED  #3");
 
                    EXCEPTION
                         WHEN E2 | E3 =>
                              WRITE(NEXT; "==> WRONG PROGRAMMER-DEFINED EXCEPTION HANDLED   #3");
                    END;
 
               EXCEPTION
                    WHEN CONSTRAINT_ERROR | NUMERIC_ERROR |
                         TIME_LIMIT | STORAGE_ERROR | INVALID_INPUT |
                         EOF_ERROR | E2 | E3   =>
                         WRITE(NEXT; "==> WRONG EXCEPTION HANDLED   #3");
               END;
 
          EXCEPTION
               WHEN E2 | CONSTRAINT_ERROR =>
                    WRITE(NEXT; "==> WRONG EXCEPTION HANDLED  #3A");
               WHEN OTHERS =>
                    FLOW_COUNT := FLOW_COUNT + 1;
          END;
 
          -- PREDEFINED EXCEPTION, SINGLE EXCEPTION_CHOICE.
 
          BEGIN
               BEGIN
                    BEGIN
                         FLOW_COUNT := FLOW_COUNT + 1;
                         RAISE CONSTRAINT_ERROR;
                         WRITE(NEXT; "==> PREDEFINED EXCEPTION NOT RAISED  #4");
 
                    EXCEPTION
                         WHEN E1 | E2 | E3 =>
                              WRITE(NEXT; "==> WRONG EXCEPTION HANDLED   #4");
                    END;
 
               EXCEPTION
                    WHEN NUMERIC_ERROR |
                         TIME_LIMIT | STORAGE_ERROR | INVALID_INPUT |
                         EOF_ERROR     =>
                         WRITE(NEXT; "==> WRONG PREDEFINED " &
                                "EXCEPTION HANDLED   #4");
               END;
 
          EXCEPTION
               WHEN CONSTRAINT_ERROR =>
                    FLOW_COUNT := FLOW_COUNT + 1;
          END;
 
          -- PREDEFINED EXCEPTION, MULTIPLE EXCEPTION_CHOICES.
 
          BEGIN
               BEGIN
                    BEGIN
                         FLOW_COUNT := FLOW_COUNT + 1;
                         RAISE CONSTRAINT_ERROR;
                         WRITE(NEXT; "==> PREDEFINED EXCEPTION NOT RAISED  #5");
 
                    EXCEPTION
                         WHEN E1 | E2 | E3 =>
                              WRITE(NEXT; "==> WRONG EXCEPTION HANDLED   #5");
                    END;
 
               EXCEPTION
                    WHEN NUMERIC_ERROR |
                         TIME_LIMIT | STORAGE_ERROR | INVALID_INPUT |
                         EOF_ERROR     =>
                         WRITE(NEXT; "==> WRONG PREDEFINED EXCEPTION HANDLED   #5");
               END;
 
          EXCEPTION
               WHEN E1 | E2 =>
                    WRITE(NEXT; "==> WRONG EXCEPTION HANDLED  #5A");
               WHEN NUMERIC_ERROR | CONSTRAINT_ERROR | E3 =>
                    FLOW_COUNT := FLOW_COUNT + 1;
          END;
 
          -- PREDEFINED EXCEPTION, 'OTHERS' CHOICE.
 
          BEGIN
               BEGIN
                    BEGIN
                         FLOW_COUNT := FLOW_COUNT + 1;
                         RAISE CONSTRAINT_ERROR;
                         WRITE(NEXT; "==> PREDEFINED EXCEPTION NOT RAISED  #6");
 
                    EXCEPTION
                         WHEN E1 | E2 | E3 =>
                              WRITE(NEXT; "==> WRONG  EXCEPTION HANDLED   #6");
                    END;
 
               EXCEPTION
                    WHEN NUMERIC_ERROR |
                         TIME_LIMIT | STORAGE_ERROR | INVALID_INPUT |
                         EOF_ERROR     =>
                         WRITE(NEXT; "==> WRONG PREDEFINED EXCEPTION HANDLED   #6");
               END;
 
          EXCEPTION
               WHEN NUMERIC_ERROR | E1 =>
                    WRITE(NEXT; "==> WRONG EXCEPTION HANDLED  #6A");
               WHEN OTHERS =>
                    FLOW_COUNT := FLOW_COUNT + 1;
          END;
 
     EXCEPTION
          WHEN E1 | E2 | E3 =>
               WRITE(NEXT; "==> PROGRAMMER-DEFINED EXCEPTION HANDLED IN WRONG SCOPE");
          WHEN CONSTRAINT_ERROR =>
               WRITE(NEXT; "==> CONSTRAINT_ERROR HANDLED IN WRONG SCOPE");
          WHEN OTHERS =>
               WRITE(NEXT; "==> OTHER EXCEPTIONS HANDLED IN WRONG SCOPE");
     END;
 
     IF FLOW_COUNT /= 12 THEN
          WRITE(NEXT; "==> INCORRECT FLOW_COUNT VALUE");
     END IF;
 
     WRITE(NEXT);
END Main;
